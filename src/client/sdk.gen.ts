// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { ApiV2AbilityListData, ApiV2AbilityListResponses, ApiV2AbilityRetrieveData, ApiV2AbilityRetrieveResponses, ApiV2BerryListData, ApiV2BerryListResponses, ApiV2BerryRetrieveData, ApiV2BerryRetrieveResponses, ApiV2BerryFirmnessListData, ApiV2BerryFirmnessListResponses, ApiV2BerryFirmnessRetrieveData, ApiV2BerryFirmnessRetrieveResponses, ApiV2BerryFlavorListData, ApiV2BerryFlavorListResponses, ApiV2BerryFlavorRetrieveData, ApiV2BerryFlavorRetrieveResponses, ApiV2CharacteristicListData, ApiV2CharacteristicListResponses, ApiV2CharacteristicRetrieveData, ApiV2CharacteristicRetrieveResponses, ApiV2ContestTypeListData, ApiV2ContestTypeListResponses, ApiV2ContestTypeRetrieveData, ApiV2ContestTypeRetrieveResponses, ApiV2ContestEffectListData, ApiV2ContestEffectListResponses, ApiV2ContestEffectRetrieveData, ApiV2ContestEffectRetrieveResponses, ApiV2EggGroupListData, ApiV2EggGroupListResponses, ApiV2EggGroupRetrieveData, ApiV2EggGroupRetrieveResponses, ApiV2EncounterMethodListData, ApiV2EncounterMethodListResponses, ApiV2EncounterMethodRetrieveData, ApiV2EncounterMethodRetrieveResponses, ApiV2EncounterConditionListData, ApiV2EncounterConditionListResponses, ApiV2EncounterConditionRetrieveData, ApiV2EncounterConditionRetrieveResponses, ApiV2EncounterConditionValueListData, ApiV2EncounterConditionValueListResponses, ApiV2EncounterConditionValueRetrieveData, ApiV2EncounterConditionValueRetrieveResponses, ApiV2EvolutionChainListData, ApiV2EvolutionChainListResponses, ApiV2EvolutionChainRetrieveData, ApiV2EvolutionChainRetrieveResponses, ApiV2EvolutionTriggerListData, ApiV2EvolutionTriggerListResponses, ApiV2EvolutionTriggerRetrieveData, ApiV2EvolutionTriggerRetrieveResponses, ApiV2GenerationListData, ApiV2GenerationListResponses, ApiV2GenerationRetrieveData, ApiV2GenerationRetrieveResponses, ApiV2GenderListData, ApiV2GenderListResponses, ApiV2GenderRetrieveData, ApiV2GenderRetrieveResponses, ApiV2GrowthRateListData, ApiV2GrowthRateListResponses, ApiV2GrowthRateRetrieveData, ApiV2GrowthRateRetrieveResponses, ApiV2ItemListData, ApiV2ItemListResponses, ApiV2ItemRetrieveData, ApiV2ItemRetrieveResponses, ApiV2ItemCategoryListData, ApiV2ItemCategoryListResponses, ApiV2ItemCategoryRetrieveData, ApiV2ItemCategoryRetrieveResponses, ApiV2ItemAttributeListData, ApiV2ItemAttributeListResponses, ApiV2ItemAttributeRetrieveData, ApiV2ItemAttributeRetrieveResponses, ApiV2ItemFlingEffectListData, ApiV2ItemFlingEffectListResponses, ApiV2ItemFlingEffectRetrieveData, ApiV2ItemFlingEffectRetrieveResponses, ApiV2ItemPocketListData, ApiV2ItemPocketListResponses, ApiV2ItemPocketRetrieveData, ApiV2ItemPocketRetrieveResponses, ApiV2LanguageListData, ApiV2LanguageListResponses, ApiV2LanguageRetrieveData, ApiV2LanguageRetrieveResponses, ApiV2LocationListData, ApiV2LocationListResponses, ApiV2LocationRetrieveData, ApiV2LocationRetrieveResponses, ApiV2LocationAreaListData, ApiV2LocationAreaListResponses, ApiV2LocationAreaRetrieveData, ApiV2LocationAreaRetrieveResponses, ApiV2MachineListData, ApiV2MachineListResponses, ApiV2MachineRetrieveData, ApiV2MachineRetrieveResponses, ApiV2MoveListData, ApiV2MoveListResponses, ApiV2MoveRetrieveData, ApiV2MoveRetrieveResponses, ApiV2MoveAilmentListData, ApiV2MoveAilmentListResponses, ApiV2MoveAilmentRetrieveData, ApiV2MoveAilmentRetrieveResponses, ApiV2MoveBattleStyleListData, ApiV2MoveBattleStyleListResponses, ApiV2MoveBattleStyleRetrieveData, ApiV2MoveBattleStyleRetrieveResponses, ApiV2MoveCategoryListData, ApiV2MoveCategoryListResponses, ApiV2MoveCategoryRetrieveData, ApiV2MoveCategoryRetrieveResponses, ApiV2MoveDamageClassListData, ApiV2MoveDamageClassListResponses, ApiV2MoveDamageClassRetrieveData, ApiV2MoveDamageClassRetrieveResponses, ApiV2MoveLearnMethodListData, ApiV2MoveLearnMethodListResponses, ApiV2MoveLearnMethodRetrieveData, ApiV2MoveLearnMethodRetrieveResponses, ApiV2MoveTargetListData, ApiV2MoveTargetListResponses, ApiV2MoveTargetRetrieveData, ApiV2MoveTargetRetrieveResponses, ApiV2NatureListData, ApiV2NatureListResponses, ApiV2NatureRetrieveData, ApiV2NatureRetrieveResponses, ApiV2PalParkAreaListData, ApiV2PalParkAreaListResponses, ApiV2PalParkAreaRetrieveData, ApiV2PalParkAreaRetrieveResponses, ApiV2PokedexListData, ApiV2PokedexListResponses, ApiV2PokedexRetrieveData, ApiV2PokedexRetrieveResponses, ApiV2PokemonListData, ApiV2PokemonListResponses, ApiV2PokemonRetrieveData, ApiV2PokemonRetrieveResponses, ApiV2PokemonColorListData, ApiV2PokemonColorListResponses, ApiV2PokemonColorRetrieveData, ApiV2PokemonColorRetrieveResponses, ApiV2PokemonFormListData, ApiV2PokemonFormListResponses, ApiV2PokemonFormRetrieveData, ApiV2PokemonFormRetrieveResponses, ApiV2PokemonHabitatListData, ApiV2PokemonHabitatListResponses, ApiV2PokemonHabitatRetrieveData, ApiV2PokemonHabitatRetrieveResponses, ApiV2PokemonShapeListData, ApiV2PokemonShapeListResponses, ApiV2PokemonShapeRetrieveData, ApiV2PokemonShapeRetrieveResponses, ApiV2PokemonSpeciesListData, ApiV2PokemonSpeciesListResponses, ApiV2PokemonSpeciesRetrieveData, ApiV2PokemonSpeciesRetrieveResponses, ApiV2PokeathlonStatListData, ApiV2PokeathlonStatListResponses, ApiV2PokeathlonStatRetrieveData, ApiV2PokeathlonStatRetrieveResponses, ApiV2RegionListData, ApiV2RegionListResponses, ApiV2RegionRetrieveData, ApiV2RegionRetrieveResponses, ApiV2StatListData, ApiV2StatListResponses, ApiV2StatRetrieveData, ApiV2StatRetrieveResponses, ApiV2SuperContestEffectListData, ApiV2SuperContestEffectListResponses, ApiV2SuperContestEffectRetrieveData, ApiV2SuperContestEffectRetrieveResponses, ApiV2TypeListData, ApiV2TypeListResponses, ApiV2TypeRetrieveData, ApiV2TypeRetrieveResponses, ApiV2VersionListData, ApiV2VersionListResponses, ApiV2VersionRetrieveData, ApiV2VersionRetrieveResponses, ApiV2VersionGroupListData, ApiV2VersionGroupListResponses, ApiV2VersionGroupRetrieveData, ApiV2VersionGroupRetrieveResponses, ApiV2PokemonEncountersRetrieveData, ApiV2PokemonEncountersRetrieveResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Abilities provide passive effects for Pokémon in battle or in the overworld. Pokémon have multiple possible abilities but can have only one ability at a time. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Ability) for greater detail.
 */
export const apiV2AbilityList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2AbilityListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2AbilityListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/ability/',
        ...options
    });
};

/**
 * Abilities provide passive effects for Pokémon in battle or in the overworld. Pokémon have multiple possible abilities but can have only one ability at a time. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Ability) for greater detail.
 */
export const apiV2AbilityRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2AbilityRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2AbilityRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/ability/{id}/',
        ...options
    });
};

/**
 * List berries
 * Berries are small fruits that can provide HP and status condition restoration, stat enhancement, and even damage negation when eaten by Pokémon. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Berry) for greater detail.
 */
export const apiV2BerryList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2BerryListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2BerryListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/berry/',
        ...options
    });
};

/**
 * Get a berry
 * Berries are small fruits that can provide HP and status condition restoration, stat enhancement, and even damage negation when eaten by Pokémon. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Berry) for greater detail.
 */
export const apiV2BerryRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2BerryRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2BerryRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/berry/{id}/',
        ...options
    });
};

/**
 * List berry firmness
 * Berries can be soft or hard. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Category:Berries_by_firmness) for greater detail.
 */
export const apiV2BerryFirmnessList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2BerryFirmnessListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2BerryFirmnessListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/berry-firmness/',
        ...options
    });
};

/**
 * Get berry by firmness
 * Berries can be soft or hard. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Category:Berries_by_firmness) for greater detail.
 */
export const apiV2BerryFirmnessRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2BerryFirmnessRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2BerryFirmnessRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/berry-firmness/{id}/',
        ...options
    });
};

/**
 * List berry flavors
 * Flavors determine whether a Pokémon will benefit or suffer from eating a berry based on their **nature**. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Flavor) for greater detail.
 */
export const apiV2BerryFlavorList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2BerryFlavorListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2BerryFlavorListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/berry-flavor/',
        ...options
    });
};

/**
 * Get berries by flavor
 * Flavors determine whether a Pokémon will benefit or suffer from eating a berry based on their **nature**. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Flavor) for greater detail.
 */
export const apiV2BerryFlavorRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2BerryFlavorRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2BerryFlavorRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/berry-flavor/{id}/',
        ...options
    });
};

/**
 * List charecterictics
 * Characteristics indicate which stat contains a Pokémon's highest IV. A Pokémon's Characteristic is determined by the remainder of its highest IV divided by 5 (gene_modulo). Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Characteristic) for greater detail.
 */
export const apiV2CharacteristicList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2CharacteristicListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2CharacteristicListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/characteristic/',
        ...options
    });
};

/**
 * Get characteristic
 * Characteristics indicate which stat contains a Pokémon's highest IV. A Pokémon's Characteristic is determined by the remainder of its highest IV divided by 5 (gene_modulo). Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Characteristic) for greater detail.
 */
export const apiV2CharacteristicRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2CharacteristicRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2CharacteristicRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/characteristic/{id}/',
        ...options
    });
};

/**
 * List contest types
 * Contest types are categories judges used to weigh a Pokémon's condition in Pokémon contests. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Contest_condition) for greater detail.
 */
export const apiV2ContestTypeList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2ContestTypeListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2ContestTypeListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/contest-type/',
        ...options
    });
};

/**
 * Get contest type
 * Contest types are categories judges used to weigh a Pokémon's condition in Pokémon contests. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Contest_condition) for greater detail.
 */
export const apiV2ContestTypeRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2ContestTypeRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2ContestTypeRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/contest-type/{id}/',
        ...options
    });
};

/**
 * List contest effects
 * Contest effects refer to the effects of moves when used in contests.
 */
export const apiV2ContestEffectList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2ContestEffectListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2ContestEffectListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/contest-effect/',
        ...options
    });
};

/**
 * Get contest effect
 * Contest effects refer to the effects of moves when used in contests.
 */
export const apiV2ContestEffectRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2ContestEffectRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2ContestEffectRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/contest-effect/{id}/',
        ...options
    });
};

/**
 * List egg groups
 * Egg Groups are categories which determine which Pokémon are able to interbreed. Pokémon may belong to either one or two Egg Groups. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Egg_Group) for greater detail.
 */
export const apiV2EggGroupList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2EggGroupListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2EggGroupListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/egg-group/',
        ...options
    });
};

/**
 * Get egg group
 * Egg Groups are categories which determine which Pokémon are able to interbreed. Pokémon may belong to either one or two Egg Groups. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Egg_Group) for greater detail.
 */
export const apiV2EggGroupRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2EggGroupRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2EggGroupRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/egg-group/{id}/',
        ...options
    });
};

/**
 * List encounter methods
 * Methods by which the player might can encounter Pokémon in the wild, e.g., walking in tall grass. Check out Bulbapedia for greater detail.
 */
export const apiV2EncounterMethodList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2EncounterMethodListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2EncounterMethodListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/encounter-method/',
        ...options
    });
};

/**
 * Get encounter method
 * Methods by which the player might can encounter Pokémon in the wild, e.g., walking in tall grass. Check out Bulbapedia for greater detail.
 */
export const apiV2EncounterMethodRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2EncounterMethodRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2EncounterMethodRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/encounter-method/{id}/',
        ...options
    });
};

/**
 * List encounter conditions
 * Conditions which affect what pokemon might appear in the wild, e.g., day or night.
 */
export const apiV2EncounterConditionList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2EncounterConditionListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2EncounterConditionListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/encounter-condition/',
        ...options
    });
};

/**
 * Get encounter condition
 * Conditions which affect what pokemon might appear in the wild, e.g., day or night.
 */
export const apiV2EncounterConditionRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2EncounterConditionRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2EncounterConditionRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/encounter-condition/{id}/',
        ...options
    });
};

/**
 * List encounter condition values
 * Encounter condition values are the various states that an encounter condition can have, i.e., time of day can be either day or night.
 */
export const apiV2EncounterConditionValueList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2EncounterConditionValueListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2EncounterConditionValueListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/encounter-condition-value/',
        ...options
    });
};

/**
 * Get encounter condition value
 * Encounter condition values are the various states that an encounter condition can have, i.e., time of day can be either day or night.
 */
export const apiV2EncounterConditionValueRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2EncounterConditionValueRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2EncounterConditionValueRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/encounter-condition-value/{id}/',
        ...options
    });
};

/**
 * List evolution chains
 * Evolution chains are essentially family trees. They start with the lowest stage within a family and detail evolution conditions for each as well as Pokémon they can evolve into up through the hierarchy.
 */
export const apiV2EvolutionChainList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2EvolutionChainListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2EvolutionChainListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/evolution-chain/',
        ...options
    });
};

/**
 * Get evolution chain
 * Evolution chains are essentially family trees. They start with the lowest stage within a family and detail evolution conditions for each as well as Pokémon they can evolve into up through the hierarchy.
 */
export const apiV2EvolutionChainRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2EvolutionChainRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2EvolutionChainRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/evolution-chain/{id}/',
        ...options
    });
};

/**
 * List evolution triggers
 * Evolution triggers are the events and conditions that cause a Pokémon to evolve. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Methods_of_evolution) for greater detail.
 */
export const apiV2EvolutionTriggerList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2EvolutionTriggerListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2EvolutionTriggerListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/evolution-trigger/',
        ...options
    });
};

/**
 * Get evolution trigger
 * Evolution triggers are the events and conditions that cause a Pokémon to evolve. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Methods_of_evolution) for greater detail.
 */
export const apiV2EvolutionTriggerRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2EvolutionTriggerRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2EvolutionTriggerRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/evolution-trigger/{id}/',
        ...options
    });
};

/**
 * List genrations
 * A generation is a grouping of the Pokémon games that separates them based on the Pokémon they include. In each generation, a new set of Pokémon, Moves, Abilities and Types that did not exist in the previous generation are released.
 */
export const apiV2GenerationList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2GenerationListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2GenerationListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/generation/',
        ...options
    });
};

/**
 * Get genration
 * A generation is a grouping of the Pokémon games that separates them based on the Pokémon they include. In each generation, a new set of Pokémon, Moves, Abilities and Types that did not exist in the previous generation are released.
 */
export const apiV2GenerationRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2GenerationRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2GenerationRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/generation/{id}/',
        ...options
    });
};

/**
 * List genders
 * Genders were introduced in Generation II for the purposes of breeding Pokémon but can also result in visual differences or even different evolutionary lines. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Gender) for greater detail.
 */
export const apiV2GenderList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2GenderListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2GenderListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/gender/',
        ...options
    });
};

/**
 * Get gender
 * Genders were introduced in Generation II for the purposes of breeding Pokémon but can also result in visual differences or even different evolutionary lines. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Gender) for greater detail.
 */
export const apiV2GenderRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2GenderRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2GenderRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/gender/{id}/',
        ...options
    });
};

/**
 * List growth rates
 * Growth rates are the speed with which Pokémon gain levels through experience. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Experience) for greater detail.
 */
export const apiV2GrowthRateList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2GrowthRateListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2GrowthRateListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/growth-rate/',
        ...options
    });
};

/**
 * Get growth rate
 * Growth rates are the speed with which Pokémon gain levels through experience. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Experience) for greater detail.
 */
export const apiV2GrowthRateRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2GrowthRateRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2GrowthRateRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/growth-rate/{id}/',
        ...options
    });
};

/**
 * List items
 * An item is an object in the games which the player can pick up, keep in their bag, and use in some manner. They have various uses, including healing, powering up, helping catch Pokémon, or to access a new area.
 */
export const apiV2ItemList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2ItemListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2ItemListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/item/',
        ...options
    });
};

/**
 * Get item
 * An item is an object in the games which the player can pick up, keep in their bag, and use in some manner. They have various uses, including healing, powering up, helping catch Pokémon, or to access a new area.
 */
export const apiV2ItemRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2ItemRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2ItemRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/item/{id}/',
        ...options
    });
};

/**
 * List item categories
 * Item categories determine where items will be placed in the players bag.
 */
export const apiV2ItemCategoryList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2ItemCategoryListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2ItemCategoryListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/item-category/',
        ...options
    });
};

/**
 * Get item category
 * Item categories determine where items will be placed in the players bag.
 */
export const apiV2ItemCategoryRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2ItemCategoryRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2ItemCategoryRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/item-category/{id}/',
        ...options
    });
};

/**
 * List item attributes
 * Item attributes define particular aspects of items, e.g."usable in battle" or "consumable".
 */
export const apiV2ItemAttributeList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2ItemAttributeListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2ItemAttributeListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/item-attribute/',
        ...options
    });
};

/**
 * Get item attribute
 * Item attributes define particular aspects of items, e.g."usable in battle" or "consumable".
 */
export const apiV2ItemAttributeRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2ItemAttributeRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2ItemAttributeRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/item-attribute/{id}/',
        ...options
    });
};

/**
 * List item fling effects
 * The various effects of the move"Fling" when used with different items.
 */
export const apiV2ItemFlingEffectList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2ItemFlingEffectListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2ItemFlingEffectListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/item-fling-effect/',
        ...options
    });
};

/**
 * Get item fling effect
 * The various effects of the move"Fling" when used with different items.
 */
export const apiV2ItemFlingEffectRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2ItemFlingEffectRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2ItemFlingEffectRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/item-fling-effect/{id}/',
        ...options
    });
};

/**
 * List item pockets
 * Pockets within the players bag used for storing items by category.
 */
export const apiV2ItemPocketList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2ItemPocketListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2ItemPocketListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/item-pocket/',
        ...options
    });
};

/**
 * Get item pocket
 * Pockets within the players bag used for storing items by category.
 */
export const apiV2ItemPocketRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2ItemPocketRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2ItemPocketRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/item-pocket/{id}/',
        ...options
    });
};

/**
 * List languages
 * Languages for translations of API resource information.
 */
export const apiV2LanguageList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2LanguageListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2LanguageListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/language/',
        ...options
    });
};

/**
 * Get language
 * Languages for translations of API resource information.
 */
export const apiV2LanguageRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2LanguageRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2LanguageRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/language/{id}/',
        ...options
    });
};

/**
 * List locations
 * Locations that can be visited within the games. Locations make up sizable portions of regions, like cities or routes.
 */
export const apiV2LocationList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2LocationListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2LocationListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/location/',
        ...options
    });
};

/**
 * Get location
 * Locations that can be visited within the games. Locations make up sizable portions of regions, like cities or routes.
 */
export const apiV2LocationRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2LocationRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2LocationRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/location/{id}/',
        ...options
    });
};

/**
 * List location areas
 * Location areas are sections of areas, such as floors in a building or cave. Each area has its own set of possible Pokémon encounters.
 */
export const apiV2LocationAreaList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2LocationAreaListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2LocationAreaListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/location-area/',
        ...options
    });
};

/**
 * Get location area
 * Location areas are sections of areas, such as floors in a building or cave. Each area has its own set of possible Pokémon encounters.
 */
export const apiV2LocationAreaRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2LocationAreaRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2LocationAreaRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/location-area/{id}/',
        ...options
    });
};

/**
 * List machines
 * Machines are the representation of items that teach moves to Pokémon. They vary from version to version, so it is not certain that one specific TM or HM corresponds to a single Machine.
 */
export const apiV2MachineList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2MachineListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2MachineListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/machine/',
        ...options
    });
};

/**
 * Get machine
 * Machines are the representation of items that teach moves to Pokémon. They vary from version to version, so it is not certain that one specific TM or HM corresponds to a single Machine.
 */
export const apiV2MachineRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2MachineRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2MachineRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/machine/{id}/',
        ...options
    });
};

/**
 * List moves
 * Moves are the skills of Pokémon in battle. In battle, a Pokémon uses one move each turn. Some moves (including those learned by Hidden Machine) can be used outside of battle as well, usually for the purpose of removing obstacles or exploring new areas.
 */
export const apiV2MoveList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2MoveListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2MoveListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/move/',
        ...options
    });
};

/**
 * Get move
 * Moves are the skills of Pokémon in battle. In battle, a Pokémon uses one move each turn. Some moves (including those learned by Hidden Machine) can be used outside of battle as well, usually for the purpose of removing obstacles or exploring new areas.
 */
export const apiV2MoveRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2MoveRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2MoveRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/move/{id}/',
        ...options
    });
};

/**
 * List move meta ailments
 * Move Ailments are status conditions caused by moves used during battle. See [Bulbapedia](https://bulbapedia.bulbagarden.net/wiki/Status_condition) for greater detail.
 */
export const apiV2MoveAilmentList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2MoveAilmentListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2MoveAilmentListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/move-ailment/',
        ...options
    });
};

/**
 * Get move meta ailment
 * Move Ailments are status conditions caused by moves used during battle. See [Bulbapedia](https://bulbapedia.bulbagarden.net/wiki/Status_condition) for greater detail.
 */
export const apiV2MoveAilmentRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2MoveAilmentRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2MoveAilmentRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/move-ailment/{id}/',
        ...options
    });
};

/**
 * List move battle styles
 * Styles of moves when used in the Battle Palace. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Battle_Frontier_(Generation_III)) for greater detail.
 */
export const apiV2MoveBattleStyleList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2MoveBattleStyleListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2MoveBattleStyleListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/move-battle-style/',
        ...options
    });
};

/**
 * Get move battle style
 * Styles of moves when used in the Battle Palace. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Battle_Frontier_(Generation_III)) for greater detail.
 */
export const apiV2MoveBattleStyleRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2MoveBattleStyleRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2MoveBattleStyleRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/move-battle-style/{id}/',
        ...options
    });
};

/**
 * List move meta categories
 * Very general categories that loosely group move effects.
 */
export const apiV2MoveCategoryList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2MoveCategoryListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2MoveCategoryListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/move-category/',
        ...options
    });
};

/**
 * Get move meta category
 * Very general categories that loosely group move effects.
 */
export const apiV2MoveCategoryRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2MoveCategoryRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2MoveCategoryRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/move-category/{id}/',
        ...options
    });
};

/**
 * List move damage classes
 * Damage classes moves can have, e.g. physical, special, or non-damaging.
 */
export const apiV2MoveDamageClassList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2MoveDamageClassListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2MoveDamageClassListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/move-damage-class/',
        ...options
    });
};

/**
 * Get move damage class
 * Damage classes moves can have, e.g. physical, special, or non-damaging.
 */
export const apiV2MoveDamageClassRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2MoveDamageClassRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2MoveDamageClassRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/move-damage-class/{id}/',
        ...options
    });
};

/**
 * List move learn methods
 * Methods by which Pokémon can learn moves.
 */
export const apiV2MoveLearnMethodList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2MoveLearnMethodListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2MoveLearnMethodListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/move-learn-method/',
        ...options
    });
};

/**
 * Get move learn method
 * Methods by which Pokémon can learn moves.
 */
export const apiV2MoveLearnMethodRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2MoveLearnMethodRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2MoveLearnMethodRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/move-learn-method/{id}/',
        ...options
    });
};

/**
 * List move targets
 * Targets moves can be directed at during battle. Targets can be Pokémon, environments or even other moves.
 */
export const apiV2MoveTargetList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2MoveTargetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2MoveTargetListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/move-target/',
        ...options
    });
};

/**
 * Get move target
 * Targets moves can be directed at during battle. Targets can be Pokémon, environments or even other moves.
 */
export const apiV2MoveTargetRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2MoveTargetRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2MoveTargetRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/move-target/{id}/',
        ...options
    });
};

/**
 * List natures
 * Natures influence how a Pokémon's stats grow. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Nature) for greater detail.
 */
export const apiV2NatureList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2NatureListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2NatureListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/nature/',
        ...options
    });
};

/**
 * Get nature
 * Natures influence how a Pokémon's stats grow. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Nature) for greater detail.
 */
export const apiV2NatureRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2NatureRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2NatureRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/nature/{id}/',
        ...options
    });
};

/**
 * List pal park areas
 * Areas used for grouping Pokémon encounters in Pal Park. They're like habitats that are specific to Pal Park.
 */
export const apiV2PalParkAreaList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2PalParkAreaListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2PalParkAreaListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/pal-park-area/',
        ...options
    });
};

/**
 * Get pal park area
 * Areas used for grouping Pokémon encounters in Pal Park. They're like habitats that are specific to Pal Park.
 */
export const apiV2PalParkAreaRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2PalParkAreaRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2PalParkAreaRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/pal-park-area/{id}/',
        ...options
    });
};

/**
 * List pokedex
 * A Pokédex is a handheld electronic encyclopedia device; one which is capable of recording and retaining information of the various Pokémon in a given region with the exception of the national dex and some smaller dexes related to portions of a region. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pokedex) for greater detail.
 */
export const apiV2PokedexList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2PokedexListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2PokedexListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/pokedex/',
        ...options
    });
};

/**
 * Get pokedex
 * A Pokédex is a handheld electronic encyclopedia device; one which is capable of recording and retaining information of the various Pokémon in a given region with the exception of the national dex and some smaller dexes related to portions of a region. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pokedex) for greater detail.
 */
export const apiV2PokedexRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2PokedexRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2PokedexRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/pokedex/{id}/',
        ...options
    });
};

/**
 * List pokemon
 * Pokémon are the creatures that inhabit the world of the Pokémon games. They can be caught using Pokéballs and trained by battling with other Pokémon. Each Pokémon belongs to a specific species but may take on a variant which makes it differ from other Pokémon of the same species, such as base stats, available abilities and typings. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pok%C3%A9mon_(species)) for greater detail.
 */
export const apiV2PokemonList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2PokemonListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2PokemonListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/pokemon/',
        ...options
    });
};

/**
 * Get pokemon
 * Pokémon are the creatures that inhabit the world of the Pokémon games. They can be caught using Pokéballs and trained by battling with other Pokémon. Each Pokémon belongs to a specific species but may take on a variant which makes it differ from other Pokémon of the same species, such as base stats, available abilities and typings. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pok%C3%A9mon_(species)) for greater detail.
 */
export const apiV2PokemonRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2PokemonRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2PokemonRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/pokemon/{id}/',
        ...options
    });
};

/**
 * List pokemon colors
 * Colors used for sorting Pokémon in a Pokédex. The color listed in the Pokédex is usually the color most apparent or covering each Pokémon's body. No orange category exists; Pokémon that are primarily orange are listed as red or brown.
 */
export const apiV2PokemonColorList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2PokemonColorListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2PokemonColorListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/pokemon-color/',
        ...options
    });
};

/**
 * Get pokemon color
 * Colors used for sorting Pokémon in a Pokédex. The color listed in the Pokédex is usually the color most apparent or covering each Pokémon's body. No orange category exists; Pokémon that are primarily orange are listed as red or brown.
 */
export const apiV2PokemonColorRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2PokemonColorRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2PokemonColorRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/pokemon-color/{id}/',
        ...options
    });
};

/**
 * List pokemon forms
 * Some Pokémon may appear in one of multiple, visually different forms. These differences are purely cosmetic. For variations within a Pokémon species, which do differ in more than just visuals, the 'Pokémon' entity is used to represent such a variety.
 */
export const apiV2PokemonFormList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2PokemonFormListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2PokemonFormListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/pokemon-form/',
        ...options
    });
};

/**
 * Get pokemon form
 * Some Pokémon may appear in one of multiple, visually different forms. These differences are purely cosmetic. For variations within a Pokémon species, which do differ in more than just visuals, the 'Pokémon' entity is used to represent such a variety.
 */
export const apiV2PokemonFormRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2PokemonFormRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2PokemonFormRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/pokemon-form/{id}/',
        ...options
    });
};

/**
 * List pokemom habitas
 * Habitats are generally different terrain Pokémon can be found in but can also be areas designated for rare or legendary Pokémon.
 */
export const apiV2PokemonHabitatList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2PokemonHabitatListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2PokemonHabitatListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/pokemon-habitat/',
        ...options
    });
};

/**
 * Get pokemom habita
 * Habitats are generally different terrain Pokémon can be found in but can also be areas designated for rare or legendary Pokémon.
 */
export const apiV2PokemonHabitatRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2PokemonHabitatRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2PokemonHabitatRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/pokemon-habitat/{id}/',
        ...options
    });
};

/**
 * List pokemon shapes
 * Shapes used for sorting Pokémon in a Pokédex.
 */
export const apiV2PokemonShapeList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2PokemonShapeListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2PokemonShapeListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/pokemon-shape/',
        ...options
    });
};

/**
 * Get pokemon shape
 * Shapes used for sorting Pokémon in a Pokédex.
 */
export const apiV2PokemonShapeRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2PokemonShapeRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2PokemonShapeRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/pokemon-shape/{id}/',
        ...options
    });
};

/**
 * List pokemon species
 * A Pokémon Species forms the basis for at least one Pokémon. Attributes of a Pokémon species are shared across all varieties of Pokémon within the species. A good example is Wormadam; Wormadam is the species which can be found in three different varieties, Wormadam-Trash, Wormadam-Sandy and Wormadam-Plant.
 */
export const apiV2PokemonSpeciesList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2PokemonSpeciesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2PokemonSpeciesListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/pokemon-species/',
        ...options
    });
};

/**
 * Get pokemon species
 * A Pokémon Species forms the basis for at least one Pokémon. Attributes of a Pokémon species are shared across all varieties of Pokémon within the species. A good example is Wormadam; Wormadam is the species which can be found in three different varieties, Wormadam-Trash, Wormadam-Sandy and Wormadam-Plant.
 */
export const apiV2PokemonSpeciesRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2PokemonSpeciesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2PokemonSpeciesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/pokemon-species/{id}/',
        ...options
    });
};

/**
 * List pokeathlon stats
 * Pokeathlon Stats are different attributes of a Pokémon's performance in Pokéathlons. In Pokéathlons, competitions happen on different courses; one for each of the different Pokéathlon stats. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pok%C3%A9athlon) for greater detail.
 */
export const apiV2PokeathlonStatList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2PokeathlonStatListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2PokeathlonStatListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/pokeathlon-stat/',
        ...options
    });
};

/**
 * Get pokeathlon stat
 * Pokeathlon Stats are different attributes of a Pokémon's performance in Pokéathlons. In Pokéathlons, competitions happen on different courses; one for each of the different Pokéathlon stats. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pok%C3%A9athlon) for greater detail.
 */
export const apiV2PokeathlonStatRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2PokeathlonStatRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2PokeathlonStatRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/pokeathlon-stat/{id}/',
        ...options
    });
};

/**
 * List regions
 * A region is an organized area of the Pokémon world. Most often, the main difference between regions is the species of Pokémon that can be encountered within them.
 */
export const apiV2RegionList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2RegionListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2RegionListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/region/',
        ...options
    });
};

/**
 * Get region
 * A region is an organized area of the Pokémon world. Most often, the main difference between regions is the species of Pokémon that can be encountered within them.
 */
export const apiV2RegionRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2RegionRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2RegionRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/region/{id}/',
        ...options
    });
};

/**
 * List stats
 * Stats determine certain aspects of battles. Each Pokémon has a value for each stat which grows as they gain levels and can be altered momentarily by effects in battles.
 */
export const apiV2StatList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2StatListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2StatListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/stat/',
        ...options
    });
};

/**
 * Get stat
 * Stats determine certain aspects of battles. Each Pokémon has a value for each stat which grows as they gain levels and can be altered momentarily by effects in battles.
 */
export const apiV2StatRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2StatRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2StatRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/stat/{id}/',
        ...options
    });
};

/**
 * List super contest effects
 * Super contest effects refer to the effects of moves when used in super contests.
 */
export const apiV2SuperContestEffectList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2SuperContestEffectListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2SuperContestEffectListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/super-contest-effect/',
        ...options
    });
};

/**
 * Get super contest effect
 * Super contest effects refer to the effects of moves when used in super contests.
 */
export const apiV2SuperContestEffectRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2SuperContestEffectRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2SuperContestEffectRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/super-contest-effect/{id}/',
        ...options
    });
};

/**
 * List types
 * Types are properties for Pokémon and their moves. Each type has three properties: which types of Pokémon it is super effective against, which types of Pokémon it is not very effective against, and which types of Pokémon it is completely ineffective against.
 */
export const apiV2TypeList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2TypeListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2TypeListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/type/',
        ...options
    });
};

/**
 * Get types
 * Types are properties for Pokémon and their moves. Each type has three properties: which types of Pokémon it is super effective against, which types of Pokémon it is not very effective against, and which types of Pokémon it is completely ineffective against.
 */
export const apiV2TypeRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2TypeRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2TypeRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/type/{id}/',
        ...options
    });
};

/**
 * List versions
 * Versions of the games, e.g., Red, Blue or Yellow.
 */
export const apiV2VersionList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2VersionListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2VersionListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/version/',
        ...options
    });
};

/**
 * Get version
 * Versions of the games, e.g., Red, Blue or Yellow.
 */
export const apiV2VersionRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2VersionRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2VersionRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/version/{id}/',
        ...options
    });
};

/**
 * List version groups
 * Version groups categorize highly similar versions of the games.
 */
export const apiV2VersionGroupList = <ThrowOnError extends boolean = false>(options?: Options<ApiV2VersionGroupListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiV2VersionGroupListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/version-group/',
        ...options
    });
};

/**
 * Get version group
 * Version groups categorize highly similar versions of the games.
 */
export const apiV2VersionGroupRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2VersionGroupRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2VersionGroupRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/version-group/{id}/',
        ...options
    });
};

/**
 * Get pokemon encounter
 * Handles Pokemon Encounters as a sub-resource.
 */
export const apiV2PokemonEncountersRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiV2PokemonEncountersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiV2PokemonEncountersRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v2/pokemon/{pokemon_id}/encounters',
        ...options
    });
};